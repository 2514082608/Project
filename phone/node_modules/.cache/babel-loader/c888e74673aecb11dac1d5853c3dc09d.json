{"remainingRequest":"E:\\BaiduNetdiskDownload\\作业\\三阶段作业\\phone\\node_modules\\babel-loader\\lib\\index.js!E:\\BaiduNetdiskDownload\\作业\\三阶段作业\\phone\\src\\store\\moudel\\shopcar.js","dependencies":[{"path":"E:\\BaiduNetdiskDownload\\作业\\三阶段作业\\phone\\src\\store\\moudel\\shopcar.js","mtime":1597235300442},{"path":"E:\\BaiduNetdiskDownload\\作业\\三阶段作业\\phone\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\BaiduNetdiskDownload\\作业\\三阶段作业\\phone\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.for-each\";\nimport _toConsumableArray from \"E:\\\\BaiduNetdiskDownload\\\\\\u4F5C\\u4E1A\\\\\\u4E09\\u9636\\u6BB5\\u4F5C\\u4E1A\\\\phone\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/toConsumableArray\";\n//仓库管理存储的数据\nvar state = {\n  buycar: [] //接收组件发送过来的请求\n\n};\nvar actions = {\n  //additem是组件发送过来的请求名字 所以在这里以同样的名字接收，\n  addItem: function addItem(_ref, payload) {\n    var commit = _ref.commit,\n        state = _ref.state;\n\n    //浅拷贝一下在state里定义好的数组 因为不能操作元数组 否则会数据不响应式\n    var arr = _toConsumableArray(state.buycar);\n\n    var find = false; //这个是用于判断商品是否存在，默认是不存在\n    //这里对定义好的数组进行遍历，如果其中的某一项的_id跟传过来的_id相同，表示这个商品存在那我就直接让我存放在数组的num加一\n    //并且改变find的值为wrue\n\n    state.buycar.forEach(function (item, index) {\n      if (item._id == payload._id) {\n        find = true;\n        item.num++;\n      }\n    });\n\n    if (!find) {\n      //这里 如果 find 是ture 取反 就是false 表示不通过就不会执行了\n      //这里 如果 find 是false 取反 就是ture 表示通过就会执行了\n      //为false 表示没有这个商品 就把它整个添加进去\n      payload.num = 1;\n      arr.push(payload);\n    } //将处理好的这个arr 发送给mutation\n\n\n    commit('ADD_ITEM', arr);\n  },\n  //整个表示组件发送来的删除请求 我在这里进行业务处理，\n  del: function del(_ref2, payload) {\n    var commit = _ref2.commit,\n        state = _ref2.state;\n    //遍历一下state.buycar这个数组\n    state.buycar.forEach(function (item, index) {\n      //如果当前的这个id等于我传递过来的id  那我就删除这个数组\n      if (item._id == payload._id) {\n        //使用数组的删除方法 splice \n        state.buycar.splice(index, 1);\n      }\n    }); //将这个处理好的数组发送给 mutation\n\n    commit('DEL', _toConsumableArray(state.buycar));\n  } //接收actions发送过来的请求\n\n};\nvar mutations = {\n  //接受actions发送过来的这个数组  因为我只进行 数据的赋值 所以直接给state.buycar进行赋值\n  ADD_ITEM: function ADD_ITEM(state, payload) {\n    state.buycar = payload;\n  },\n  DEL: function DEL(state, payload) {\n    state.buycar = payload;\n  } //处理一下结果\n\n};\nvar getters = {};\nexport default {\n  namespaced: true,\n  //命名空间的模块。模块内部直接调用，外部需要命名空间(见组件)\n  state: state,\n  actions: actions,\n  mutations: mutations,\n  getters: getters\n};",{"version":3,"sources":["E:\\BaiduNetdiskDownload\\作业\\三阶段作业\\phone\\src\\store\\moudel\\shopcar.js"],"names":["state","buycar","actions","addItem","payload","commit","arr","find","forEach","item","index","_id","num","push","del","splice","mutations","ADD_ITEM","DEL","getters","namespaced"],"mappings":";;;AAAA;AACA,IAAMA,KAAK,GAAG;AACbC,EAAAA,MAAM,EAAE,EADK,CAId;;AAJc,CAAd;AAKA,IAAMC,OAAO,GAAG;AACf;AACAC,EAAAA,OAAO,EAAE,uBAGNC,OAHM,EAGM;AAAA,QAFdC,MAEc,QAFdA,MAEc;AAAA,QADdL,KACc,QADdA,KACc;;AACd;AACA,QAAIM,GAAG,sBAAON,KAAK,CAACC,MAAb,CAAP;;AACA,QAAIM,IAAI,GAAG,KAAX,CAHc,CAGI;AAClB;AACA;;AACAP,IAAAA,KAAK,CAACC,MAAN,CAAaO,OAAb,CAAqB,UAACC,IAAD,EAAOC,KAAP,EAAiB;AACrC,UAAID,IAAI,CAACE,GAAL,IAAYP,OAAO,CAACO,GAAxB,EAA6B;AAC5BJ,QAAAA,IAAI,GAAG,IAAP;AACAE,QAAAA,IAAI,CAACG,GAAL;AACA;AACD,KALD;;AAMA,QAAI,CAACL,IAAL,EAAW;AACV;AACA;AACA;AACAH,MAAAA,OAAO,CAACQ,GAAR,GAAc,CAAd;AACAN,MAAAA,GAAG,CAACO,IAAJ,CAAST,OAAT;AACA,KAlBa,CAmBd;;;AACAC,IAAAA,MAAM,CAAC,UAAD,EAAaC,GAAb,CAAN;AACA,GA1Bc;AA2Bf;AACAQ,EAAAA,GAAG,EAAC,oBAAgBV,OAAhB,EAA0B;AAAA,QAAxBC,MAAwB,SAAxBA,MAAwB;AAAA,QAAjBL,KAAiB,SAAjBA,KAAiB;AAC7B;AACAA,IAAAA,KAAK,CAACC,MAAN,CAAaO,OAAb,CAAqB,UAACC,IAAD,EAAMC,KAAN,EAAc;AAClC;AACA,UAAGD,IAAI,CAACE,GAAL,IAAUP,OAAO,CAACO,GAArB,EAAyB;AACxB;AACAX,QAAAA,KAAK,CAACC,MAAN,CAAac,MAAb,CAAoBL,KAApB,EAA0B,CAA1B;AACA;AACD,KAND,EAF6B,CAS7B;;AACAL,IAAAA,MAAM,CAAC,KAAD,qBAAWL,KAAK,CAACC,MAAjB,EAAN;AACA,GAvCc,CAyChB;;AAzCgB,CAAhB;AA0CA,IAAMe,SAAS,GAAG;AACjB;AACAC,EAAAA,QAAQ,EAAE,kBAACjB,KAAD,EAAQI,OAAR,EAAoB;AAC7BJ,IAAAA,KAAK,CAACC,MAAN,GAAeG,OAAf;AACA,GAJgB;AAKjBc,EAAAA,GAAG,EAAC,aAAClB,KAAD,EAAOI,OAAP,EAAiB;AACpBJ,IAAAA,KAAK,CAACC,MAAN,GAAaG,OAAb;AACA,GAPgB,CASlB;;AATkB,CAAlB;AAUA,IAAMe,OAAO,GAAG,EAAhB;AAIA,eAAe;AACdC,EAAAA,UAAU,EAAE,IADE;AACI;AAClBpB,EAAAA,KAAK,EAALA,KAFc;AAGdE,EAAAA,OAAO,EAAPA,OAHc;AAIdc,EAAAA,SAAS,EAATA,SAJc;AAKdG,EAAAA,OAAO,EAAPA;AALc,CAAf","sourcesContent":["//仓库管理存储的数据\r\nconst state = {\r\n\tbuycar: []\r\n}\r\n\r\n//接收组件发送过来的请求\r\nconst actions = {\r\n\t//additem是组件发送过来的请求名字 所以在这里以同样的名字接收，\r\n\taddItem: ({\r\n\t\tcommit,\r\n\t\tstate\r\n\t}, payload) => {\r\n\t\t//浅拷贝一下在state里定义好的数组 因为不能操作元数组 否则会数据不响应式\r\n\t\tlet arr = [...state.buycar];\r\n\t\tlet find = false; //这个是用于判断商品是否存在，默认是不存在\r\n\t\t//这里对定义好的数组进行遍历，如果其中的某一项的_id跟传过来的_id相同，表示这个商品存在那我就直接让我存放在数组的num加一\r\n\t\t//并且改变find的值为wrue\r\n\t\tstate.buycar.forEach((item, index) => {\r\n\t\t\tif (item._id == payload._id) {\r\n\t\t\t\tfind = true;\r\n\t\t\t\titem.num++\r\n\t\t\t}\r\n\t\t})\r\n\t\tif (!find) {\r\n\t\t\t//这里 如果 find 是ture 取反 就是false 表示不通过就不会执行了\r\n\t\t\t//这里 如果 find 是false 取反 就是ture 表示通过就会执行了\r\n\t\t\t//为false 表示没有这个商品 就把它整个添加进去\r\n\t\t\tpayload.num = 1;\r\n\t\t\tarr.push(payload)\r\n\t\t}\r\n\t\t//将处理好的这个arr 发送给mutation\r\n\t\tcommit('ADD_ITEM', arr)\r\n\t},\r\n\t//整个表示组件发送来的删除请求 我在这里进行业务处理，\r\n\tdel:({commit,state},payload)=>{\r\n\t\t//遍历一下state.buycar这个数组\r\n\t\tstate.buycar.forEach((item,index)=>{\r\n\t\t\t//如果当前的这个id等于我传递过来的id  那我就删除这个数组\r\n\t\t\tif(item._id==payload._id){\r\n\t\t\t\t//使用数组的删除方法 splice \r\n\t\t\t\tstate.buycar.splice(index,1)\r\n\t\t\t}\r\n\t\t})\r\n\t\t//将这个处理好的数组发送给 mutation\r\n\t\tcommit('DEL',[...state.buycar])\r\n\t}\r\n}\r\n//接收actions发送过来的请求\r\nconst mutations = {\r\n\t//接受actions发送过来的这个数组  因为我只进行 数据的赋值 所以直接给state.buycar进行赋值\r\n\tADD_ITEM: (state, payload) => {\r\n\t\tstate.buycar = payload\r\n\t},\r\n\tDEL:(state,payload)=>{\r\n\t\tstate.buycar=payload\r\n\t}\r\n}\r\n//处理一下结果\r\nconst getters = {\r\n\r\n}\r\n\r\nexport default {\r\n\tnamespaced: true, //命名空间的模块。模块内部直接调用，外部需要命名空间(见组件)\r\n\tstate,\r\n\tactions,\r\n\tmutations,\r\n\tgetters\r\n}\n"]}]}